import {ArrowLeftIcon} from "@heroicons/react/outline";
import { modalState } from "atoms/modal-atom";
import { Login } from "components/Login";
import { Modal } from "components/Modal";
import { Sidebar } from "components/Sidebar";
import { db } from "firebase.config";
import { collection, doc, onSnapshot, orderBy, query, QueryDocumentSnapshot } from "firebase/firestore";
import type {
    NextPage,
    GetServerSideProps,
    GetServerSidePropsContext,
    InferGetServerSidePropsType,
} from "next";
import { getProviders, getSession, useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { useRecoilState } from "recoil";
import { PostType } from "types/Post.type";
import { Post } from "components/Post";
import {CommentType} from "types/Comment.type";
import {Comment} from 'components/Comment'; 
import {Widget} from "components/Widget";

export default function PostPage<NextPage>({
    trendingResults,
    followResults,
    providers,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
    const { data: session } = useSession();
    const [isOpen, etIsOpen] = useRecoilState(modalState);
	const [comments, setComments] = useState<QueryDocumentSnapshot<CommentType>[]>([]);
    const router = useRouter();
    const postId = router.query.postId! as string;

    const [post, setPost] = useState<PostType>({} as PostType);

    useEffect(
        () =>
            onSnapshot(doc(db, "posts", postId), (snapshot) => {
                setPost(snapshot.data() as PostType);
            }),
        [postId],
    );
	
	useEffect(
		() => onSnapshot(
			query(
				collection(db, 'posts', postId,'comments'),
				orderBy('timestamp', 'desc')
			),
			(snapshot) => setComments(snapshot.docs as QueryDocumentSnapshot<CommentType>[])
		)
	, [postId]);

    if (!session) return <Login providers={providers} />;
    return (
        <div>
            <Head>
                <title>
                    {post?.username} on twitter: {`"${post?.text}"`}
                </title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="bg-black min-h-screen flex max-w-[1500px]">
                <Sidebar />
                <div 
					className="flex-grow border-l border-r border-gary-700 max-w-xl sm:ml-[72px] xl:ml-[370px]"
					onClick={() => router.push('/')}
				>
					<div 
						className='flex items-center px-1.5 py-2 border-b border-gary-700 
						text-[#d9d9d9] font-semibold text-xl gap-x-4 sticky top-0 z-50 bg-black'
					>
						<div className='hoverAnimation w-9 h-9 flex items-center justify-center xl:px-0'>
							<ArrowLeftIcon className='h-5 text-white'/>
						</div>
						Tweet
					</div>
					<Post id={postId} post={post} postPage/>
					{comments && comments.length > 0 && (
						<div className='pb-72'>
							{ comments.map( comment => <Comment key={comment.id} id={comment.id} comment={comment.data()}/>)}
						</div>
					)}
				</div>
				<Widget trendingResults={trendingResults} followResults={followResults}/>
                {isOpen && <Modal />}
            </main>
        </div>
    );
}

export async function getServerSideProps<GetServerSideProps>(
    context: GetServerSidePropsContext,
) {
    const trendingResults = await fetch("https://jsonkeeper.com/b/NKEV").then(
        (res) => res.json(),
    );
    const followResults = await fetch("https://jsonkeeper.com/b/WWMJ").then(
        (res) => res.json(),
    );
    const providers = await getProviders();
    const session = await getSession(context);

    return {
        props: {
            trendingResults,
            followResults,
            providers,
            session,
        },
    };
}
